<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browse Problems - solveMyProblem</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/css/styles.css">
    <link rel="stylesheet" href="/assets/css/footer.css">
    <link rel="stylesheet" href="/assets/css/header.css">
    <style>
        #main-div {
            padding-top: 120px;
            padding-bottom: 100px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f5f5f5;
        }
        .problem-actions {
            display: flex;
            justify-content: space-around;
        }
        .problem-actions button {
            margin: 0 5px;
        }
        .status-ready {
            color: green;
            font-weight: bold;
        }
        .status-not-ready {
            color: red;
            font-weight: bold;
        }
        .status-executed {
            color: blue;
            font-weight: bold;
        }
        .pagination-container {
            margin-top: 20px;
            display: flex;
            justify-content: center;
        }
    </style>
</head>

<body>
<!-- Header with logo and system info -->
<header>
    <div class="container">
        <img id="small_logo" src="/assets/img/small_logo.png" alt="solveME logo" class="img-fluid">
        <p>System info: date/time, health, etc.</p>
    </div>
</header>

<div class="container" id="main-div">
    <!-- Title Bar -->
    <div class="title-bar">
        <h3>Problem Execution Monitoring</h3>
    </div>

    <!-- Problem Details Section -->
    <div class="problem-details-section">
        <h4>Problem Details</h4>
        <table class="table table-bordered problem-details-table">
            <thead>
            <tr>
                <th>Detail Name</th>
                <th>Value</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>Execution ID</td>
                <td id="execution-id"><%= executionId %></td>
            </tr>
            <tr>
                <td>Status</td>
                <td id="execution-status">Pending</td>
            </tr>
            </tbody>
        </table>
    </div>

    <!-- Status and Progress Section -->
    <div class="status-section">
        <h5>Execution Status</h5>
        <div class="status-message" id="status-message">Awaiting updates...</div>

        <div class="progress">
            <div class="progress-bar bg-success" role="progressbar" id="progress-bar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">0%</div>
        </div>

        <!-- Updates -->
        <div id="executionUpdates" class="mt-3">
            <h5>Execution Updates</h5>
            <ul id="updates-list"></ul>
        </div>
    </div>
</div>

<!-- Footer -->
<footer class="footer-basic">
    <div class="container text-center">
        <ul class="list-inline">
            <li class="list-inline-item"><a href="/">Home</a></li>
            <li class="list-inline-item"><a href="/credits/">Credits</a></li>
            <li class="list-inline-item"><a href="/problems/">Submit</a></li>
            <li class="list-inline-item"><a href="/problems/show">Submissions</a></li>
        </ul>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- Socket.IO Script -->
<script src="../utils/socket.js"></script>
<script>
    // Connect to the Socket.IO server
    const socket = io();

    const executionId = document.getElementById('execution-id').textContent;
    const statusMessage = document.getElementById('status-message');
    const progressBar = document.getElementById('progress-bar');
    const updatesList = document.getElementById('updates-list');

    // Listen for updates from the Manage Problem Service
    socket.on('executionStatusUpdate', (data) => {
        if (data.executionId === executionId) {
            // Update the status message
            document.getElementById('execution-status').textContent = data.status;

            if (data.status === 'in-progress') {
                statusMessage.textContent = 'Execution is in progress...';
                progressBar.style.width = `${data.progress || 0}%`;
                progressBar.textContent = `${data.progress || 0}%`;
            } else if (data.status === 'completed') {
                statusMessage.textContent = 'Execution completed successfully!';
                progressBar.style.width = '100%';
                progressBar.textContent = '100%';
                progressBar.classList.remove('bg-success');
                progressBar.classList.add('bg-info');
            } else if (data.status === 'failed') {
                statusMessage.textContent = 'Execution failed.';
                progressBar.style.width = '100%';
                progressBar.textContent = 'Failed';
                progressBar.classList.remove('bg-success');
                progressBar.classList.add('bg-danger');
            }

            // Add new updates to the list
            const updateItem = document.createElement('li');
            updateItem.textContent = `Update: ${data.message || 'No additional details.'} (Progress: ${data.progress || 0}%)`;
            updatesList.appendChild(updateItem);
        }
    });

    // Handle failure
    socket.on('executionFailed', (data) => {
        if (data.executionId === executionId) {
            statusMessage.textContent = 'Execution failed with an error.';
            progressBar.style.width = '100%';
            progressBar.textContent = 'Failed';
            progressBar.classList.remove('bg-success');
            progressBar.classList.add('bg-danger');

            const updateItem = document.createElement('li');
            updateItem.textContent = `Error: ${data.error}`;
            updatesList.appendChild(updateItem);
        }
    });

    // Handle completion
    socket.on('executionCompleted', (data) => {
        if (data.executionId === executionId) {
            statusMessage.textContent = 'Execution completed successfully!';
            progressBar.style.width = '100%';
            progressBar.textContent = '100%';
            progressBar.classList.remove('bg-success');
            progressBar.classList.add('bg-info');

            const updateItem = document.createElement('li');
            updateItem.textContent = `Result: ${data.result}`;
            updatesList.appendChild(updateItem);
        }
    });
</script>
</body>
</html>
